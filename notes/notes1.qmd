---
title: "Notes Set 1: Introduction"
author: "Chris Paciorek"
date: "2025-01-21"
format:
  pdf:
    documentclass: article
    margin-left: 30mm
    margin-right: 30mm
    toc: true
  html:
    theme: cosmo
    css: ../assets/styles.css
    toc: true
    code-copy: true
    code-block-background: true
engine: knitr
ipynb-shell-interactivity: all
---

## Introduction

This document is the first of a set of notes giving an overview of key syntax, tools, and concepts for using Julia. The notes are not meant to be particularly complete in terms of useful functions (Google and LLMs can now provide that quite well), but rather to introduce the language and consider key programming concepts in the context of Julia.

Given that, the document heavily relies on demos, with interpretation in some cases left to the reader.

This document covers basic syntax, basic types, data structures, and functions. For more information, Think Julia Chapters 1-12 is a good reference.

## Variables and types

### Basic types

Let's start by defining some variables and seeing what their types are.

```{julia, types}
typeof(2)
x = 2.0
typeof(x)
s = "hello"
typeof(s)
typeof(s[1])
typeof('\n')
## Unicode characters
'h'
'i'
'\n'
'θ'

y = (3, 7.5)
typeof(y)
```

As we'll be discussing more, knowing what type a variable is (particularly for large objects such as large arrays) is important for thinking about memory use, what methods work with what types of variables, and when variables need to be cast/coerced to a different type.

::: {.callout-warning}
The Unicode/LaTeX characters may not show up in the PDF version of this document.
:::

We can enter LaTeX characters/formatting by typing in LaTeX syntax (starting with a `\`) and then TAB.

```{julia}
θ = 3.57  # \theta TAB

#=
Note the use of a comment
in the initial line.

And this here is a multi-line comment.
=#

x₁ = 7  # x\_1 TAB

# Try \theta TAB \bar TAB = 7 (it works in some contexts).
```

:::{.callout-tip title="Question"}
Do you like the idea of using non-ASCII characters for variable names?
:::

### A bit about strings

```{julia}
#| eval: false
x = 'hello'

x = "hello"
x[1] = "a"

```


### Casting/coercing between types

```{julia}
string(32)
parse(Float64, "32.5")
```

Some languages (such as R) will often cast between types behind the scenes. With Julia, one is often
more deliberate about types as we'll see.

### More on types and comparisons

```{julia}
x = 3
y = 3.0
x == y
x ≠ y
x > y
x > y || x <= y

isa(x, Int)
y isa Int
y isa Number

'a' ∈ "banana"  # \in TAB
'a' ∉ "banana"  # \notin TAB

aString = "a"
'a' == aString
'a' == aString[1]
```

### Conditional (if-else) statements

```{julia}
if x < y
    println("x is less than y")
elseif x > y
    println("x is greater than y")
else
    println("x and y are equal")
end
```

### Printing and string interpolation

We can use variables in print statements in various ways.

```{julia}
person = "Alice"

person = "Alice";

"Hello, $(person) with name of length $(length(person))."

println("Hello, ", person, " with name of length ", length(person), ".")
println("Hello, $(person) with name of length $(length(person)).")
println("Hello, " * person * " with name of length " * string(length(person)) * ".")
```


## Functions and operators

### Operators (and not just for math/booleans)

```{julia}
value = 7;
value *= 3;
value
```

```{julia}
#| eval: false
Value
```

```
ERROR: UndefVarError: `Value` not defined
```

```{julia}
x = 3
tmp = 7x   # Unlike any other language I know!

s * " there"

s^4
```



### Getting help on functions

Type `?` to get into help mode, then the name of the function you want help on.

To see all the functions/operators available in base Julia, type "Base." and hit tab.


### Function definitions

```{julia}
function plus3(x=0)
  return 3+x
end

plus3(5)
```

Why are there two methods?

```{julia}
#| eval: false
methods(plus3)
methods(+)
```

### Vectorized use

To use a function (or operator) in a vectorized way, we (with exceptions) need to use the dot notation.

```{julia}
y = [5.3, 2.5];
```

```{julia}
#| eval: false
y + 3
plus3(y)
```

```
ERROR: MethodError: no method matching +(::Vector{Float64}, ::Int64)
For element-wise addition, use broadcasting with dot syntax: array .+ scalar
```

```{julia, vec}
y .+ 3
plus3.(y)
```

```{julia}
#| eval: false
## Apparently no general "recycling"/broadcasting.
x = [2.1, 3.1, 5.3, 7.9]
x .+ [0., 100.]
```

```
ERROR: DimensionMismatch: arrays could not be broadcast to a common size; got a dimension with lengths 4 and 2
```


### Positional and keyword arguments

Positional arguments (which are matched based on the order they are given) are specified before keyword arguments.  

```{julia, args}
#| eval: false

function norm(x, p; verbose, extra)
  if verbose  # We'll see that "logging" is a better way to do this.
     println("Executing $(p)-norm.")
  end
  if !isfinite(p) && p > 0
    return maximum(abs.(x))
  end 
  return sum(x .^ p)^(1/p)
end

z = [3.3, 4.7, -2.2]

norm(z, 2, verbose=false, extra=0)
norm(z, 2; verbose=false, extra=0)
norm(z, 2, false, 0)
norm(z, p=1; verbose=false, extra=0)
norm(z, 1, extra=0, verbose=false)
```

Arguments can have defaults:

```{julia}
function norm(x, p=2; verbose=false)
  if verbose  # We'll see that "logging" is a better way to do this.
     println("Executing $(p)-norm.")
  end
  return sum(x .^ p)^(1/p)
end
```

:::{.callout-tip title="Exercise"}
Try out various argument orders and giving or not giving names or values to the arguments and try to figure out the syntax rules of how Julia behaves. Think about how they are similar/different to your primary language and whether you like the syntax rules.
:::

Keyword arguments are generally used for controlling function behavior rather than as core inputs. They are not involved in multiple dispatch (more later).

Let's try asking a ChatBot to write a norm function in Julia. 

:::{.callout-tip title="Exercise"}
Write a function that implements the gamma density, 
$$ f(x) = \frac{\beta^{\alpha}}{\Gamma(\alpha)} x^{\alpha-1} \exp(-\beta x), $$
for shape $\alpha$ and rate $\beta$ or scale $1/\beta$, with $x>0, \alpha>0, \beta>0$.
Allow it to handle either the rate or scale parameterization and to return either the density or log density. Check that it works in a vectorized way for the random variable value and the parameters. Compare what you wrote to what a ChatBot gives.
:::


### Shorthand function definitions

These can be handy, but as a newcomer to Julia, I find them a bit hard to read.

```{julia, shorthands}
#| eval: false
plus3a(x=1) = 3+x

plus3b = (x=1) -> 3+x

# An anonymous function (useful for maps, functional programming).
((x) -> 3+x)

((x) -> 3+x)(7)
```


## Arrays and subsetting

### Sequences (and slicing)

```{julia}
some_text = "This is the Greek θ"
some_text[1]
some_text[19]
some_text[1:4]
some_text[17:end]
```


```{julia}
y = [1.1, 2.1, 3.2, 4.3, 5.7]
println(y)               # Original vector

# Slicing by index sequence:

println(y[1:3])          # First 3 elements
println(y[1:2:4])        # All odd-numbered elements
println(y[end:-1:2])     # From end back to second element in reverse
println(y[4:3])          # Empty subset
z = y[:]                 # All elements (copy (not alias) of original vector)

# Slicing by arbitrary index vector
println(y[[4,2,4,3,3,4,4]])  # Slice by index

# Slicing by boolean array
y[[true,false,true,false,true]]   # Slice by boolean array
```

:::{.callout-tip title="Exercise"}
Experiment more with slicing/indexing to make sure you get it, and what errors can occur. (As an example what happens if you index beyond the extent of the object?) See also Problems 2 and 3 on PS1.
:::

Note that the discussion of `fruits[len]` in Section 7 of *Think Julia* is incorrect.

### Arrays (i.e., lists)

```{julia}
x = ["spam", 2.0, 5, Missing, [10, 20], NaN]
length(x)

typeof(x)
y = [10, 20, 30, 40]
typeof(y)
x[1] = 3.3
x[4] = 2.7
typeof(x)   # Mutable, but type doesn't change.
```

:::{.callout-note title="Math with arrays"}

For computational efficiency, we'd want the array to contain elements all of the same type.

Note that languages like R and Python distinguish types intended for math (e.g., numpy arrays, R matrices) from more general types (e.g., lists). This is not the case for Julia, where the key thing is the type(s) involved.
:::

### Multi-dimensional arrays

```{julia, multi-array}
A = [1 2 3; 4 5 6; 7 8 9]
A
A[2,2]
A[2,:]

size(A)
size(A, 2)

## Defined column-wise:
A = [1:4  5:8  ones(Int64,4)]
```

### Arrays vs. vectors

```{julia}
ones(5)
ones(5, 1)
ones(1, 5)
ones(5, 5)

## Outer product:
ones(5, 1) * ones(1, 5)
ones(5, 1) .* ones(1, 5)
```


### A bit of linear algebra

We do linear algebra directly on the core Array type.

```{julia}
A = [1 2 3; 4 1 6; 7 8 1]
A * A
```

:::{.callout-tip title="Exercise"}
What do you expect to happen if you try to do matrix multiplication with a matrix with a mix of reals and integers? What would you expect if an element is a string?
:::


Much more on linear algebra in a few weeks.

### More on vectorization

```{julia}
x = ["spam", 2.0, 5, [10, 20]]
length(x)
length.(x)
map(length, x)

x = [2.1, 3.1, 5.3, 7.9]
x .+ 10

x + x

x .> 5.0
x .== 3.1
```


### Reduction

```{julia}
A = rand(4, 5)
sum(A)
sum(A, dims = 1)  # 2D array result
sum(A, dims = 1)[:]  # 1D array result

sum(A, dims = 2)
```

### List comprehension (comprehension syntax)

Similar to Python. 

```{julia, comp}
y = [1.0, 2.0, 2.5]
ysq = [ w^2 for w in y ]
xsqu = [ x^2 for x = 1:5 ]

xsqu_even = [ x^2 for x = 1:5 if iseven(x)]

norm2 = [ x^2 + y^2 for x = 1:5, y = 1:5 ]
```

A nice terse shorthand but can be hard to read.

(Some people love it and some people hate it.)


## Dictionaries, tuples, and structs

### Dictionaries

Key-value pairs like Python dictionaries (and somewhat like named R lists).

```{julia}
x = Dict("test" => 3, "tmp" => [2.1, 3.5], 7 => "weird")
x["tmp"][2]
x[7]
x["newkey"] = 'a'
keys(x)
```

```{julia}
#| eval: false
x["hello"]
```
```
ERROR: KeyError: key "hello" not found
```

```{julia}
get(x, "hello", 0)
```

Note that the keys don't have to be strings! This could be good for caching/memoizing/lookup:

```{julia}
x = Dict(["foo", "bar"] => 3, "tmp" => [2.1, 3.5], 7 => "weird")
x[["foo", "bar"]]
ind = 7
x[ind]
typeof(ind)
```

It would be interesting to know how it's implemented that arbitrary objects can be keys. Perhaps using hashing?

What do you think will happen here?

```{julia}
#| eval: false
ind = Int32(7)  # What do you expect?
x[ind]
ind = 7.0       # What do you expect?
x[ind]
```

### Tuples

Tuples are are similar to 1-dimensional arrays but they are *immutable* (they can't be modified)
and can have named elements.

```{julia}
x = (3, 5, "hello")
x[2]
```

```{julia}
#| eval: false
x[2] = 7
```
```
ERROR: MethodError: no method matching setindex!(::Tuple{Int64, Int64, String}, ::Int64, ::Int64)
```

```{julia}
x = 3
y = 9
y,x = x,y

# Named tuple:
x = (a=3, b=5, other="hello")
x.b
```

:::{.callout-note title="Functions with ! in their names"}
What's the deal with the "!" in `setindex`? We'll see this more shortly, but functions that modify their inputs should have their name end in "!".
:::


What do you think will happen here?

```{julia}
#| eval: false
x = (a=3, b=5, other="hello", b="foo")
x.b
```

Tuples come in handy for providing flexibility in function inputs and outputs, as seen next.

### Tuples and functions

Here we create a function that can take an arbitrary number of inputs.

```{julia}
function flexsum(args...)
   println("The first value is $(args[1]).")
   x = args[1]*2
   return sum(args)
end

flexsum(5, 7, 9)
```

Here's how to call a function that takes multiple inputs, but pass as a tuple:

```{julia}
function mydiv(x, y)
   return x / y
end

vals = [3,5]
mydiv(vals...)
```

We use tuples to have a function return multiple values.

```{julia}
function flexsum(args...)
   println("The first value is $(args[1]).")
   x = args[1]*2
   return args, x, sum(args)
end

flexsum(5, 7, 9)

```

### Structs

A struct is a "composite type", a collection of named fields, useful for holding information with a particular structure. 

```{julia}
struct Person
  name
  age
  occupation
end

lincoln = Person("Abraham Lincoln", 203, "politician")
lincoln.age
```

We'll see much more on structs next week when we talk more about using types for robust code.

Let's discuss how these are similar to and different from objects in object-oriented languages like Python, Java, and C++.

## Loops

We'll illustrate for loop syntax by using Monte Carlo simulation to estimate $\pi$ by generating points in a square and then finding the number that are inside the unit circle. 

```{julia}
#| eval: false
numThrows = 1000;
in_circle = 0;

# Run Monte Carlo simulation
for _ in 1:numThrows
  # Generate random points on 2x2 square.
  xPos = rand() * 2 - 1.0  # Equivalent to random.uniform(-1.0, 1.0)
  yPos = rand() * 2 - 1.0

  # Is point inside unit circle?
  if sqrt(xPos^2 + yPos^2) <= 1.0  # Equivalent to math.hypot()
    in_circle += 1
  end
end

# Estimate PI
pi_estimate = 4 * in_circle / numThrows
```

If you were using R or Python, what would the value of `xPos` be at the end of the loop execution?

```{julia}
#| eval: false
xPos
```
```
ERROR: UndefVarError: `xPos` not defined
```

In Julia, variables defined in the loop are local variables accessible only in the scope of the loop (more on scoping soon). This avoids clutter in the global scope.



:::{.callout-tip title="Exercise"}
I used different naming conventions for my variables (`numThrows` and `in_circle`). Look online to see what the recommended style is. 
:::


We can iterate over elements of an object like this:

```{julia}
for i in eachindex(x)
  println(i)
end
```

## String processing and regular expressions

```{julia}
x = "The cat in the hat."
replace(x, "at"=>"")

x = "We found 999 red balloons."
replace(x, r"[0-9]+"=>"some")  # Regular expression.

'a' ∈ "banana"
```

```{julia}
x = "We found 99 red balloons."
m = match(r"[0-9]+ ([a-z]+)", x)
m.match
m.captures
m.offset
```
